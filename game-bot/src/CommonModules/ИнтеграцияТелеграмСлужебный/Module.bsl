
#Область ПрограммныйИнтерфейс

// Токен телеграм бота.
// 
// Возвращаемое значение:
//  Строка - Токен телеграм бота
Функция ТокенТелеграмБота() Экспорт
	
	Возврат Константы.ТокенТелеграмБота.Получить();
	
КонецФункции

// Выполнить запрос телеграм.
// 
// Параметры:
//  ОписаниеЗапроса - см. ИнтеграцияТелеграмСлужебный.ОписаниеЗапросаТелеграм
// 
// Возвращаемое значение:
//  - HTTPОтвет
//  
Функция ВыполнитьЗапросТелеграм(ОписаниеЗапроса) Экспорт

	URN = СтрШаблон("bot%1/%2", 
		ИнтеграцияТелеграмСлужебныйПовтИсп.ТокенТелеграмБота(),
		ОписаниеЗапроса.Метод);
		
	ДобавитьПараметрыВСтроку(URN, ОписаниеЗапроса.Параметры);
	
	Соединение = ИнтеграцияТелеграмСлужебныйПовтИсп.СоединениеТелеграм();
	
	Заголовки = Новый Соответствие();
	
	Если ОписаниеЗапроса.ТипТела <> Неопределено Тогда
		Заголовки.Вставить("Content-Type", ОписаниеЗапроса.ТипТела);
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос(URN, Заголовки);
	
	Если ОписаниеЗапроса.Тело = Неопределено Тогда
		МетодHTTP = "GET";
	Иначе
		МетодHTTP = "POST";
		Если ТипЗнч(ОписаниеЗапроса.Тело) = Тип("Строка") Тогда
			Запрос.УстановитьТелоИзСтроки(ОписаниеЗапроса.Тело);
		Иначе
			Запрос.УстановитьТелоИзДвоичныхДанных(ОписаниеЗапроса.Тело);
		КонецЕсли;
	КонецЕсли;
	
	Ответ = Соединение.ВызватьHTTPМетод(МетодHTTP, Запрос);
	
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение СтрШаблон(
			"Ошибка взаимодействия с телеграм: %1
				|%2", 
			Ответ.КодСостояния, 
			Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Описание запроса телеграм.
// 
// Параметры:
//  Метод - Строка
// 
// Возвращаемое значение:
//  Структура - Параметры запроса телеграм:
// * Метод - Строка - Метод для обращения к серверу телеграм
// * ТипТела - Неопределено - Content-Type тела запроса. Применим, если нело не Неопределено.
// * Тело - Неопределено - Тело HTTP-запроса
// * Параметры - Структура - Параметры URL HTTP-запроса
Функция ОписаниеЗапросаТелеграм(Метод) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Метод", Метод);
	Результат.Вставить("ТипТела", Неопределено);
	Результат.Вставить("Тело", Неопределено);
	Результат.Вставить("Параметры", Новый Структура());
	
	Возврат Результат;
	
КонецФункции

#Область МетодыТелеграм

// Имя метода Получить обновления API Telegram
// 
// Возвращаемое значение:
//  Строка
Функция МетодПолучитьОбновления() Экспорт
	Возврат "getUpdates"
КонецФункции

// Имя метода Отправить сообщение API Telegram
// 
// Возвращаемое значение:
//  Строка
Функция МетодОтправитьСообщение() Экспорт
	Возврат "sendMessage"
КонецФункции

// Имя метода Отправить картинку API Telegram
// 
// Возвращаемое значение:
//  Строка
Функция МетодОтправитьКартинку() Экспорт
	Возврат "sendPhoto"
КонецФункции

// Имя метода Редактировать сообщение API Telegram
// 
// Возвращаемое значение:
//  Строка
Функция МетодРедактироватьСообщение() Экспорт
	Возврат "editMessageText"
КонецФункции

// Имя метода Редактировать подпись API Telegram
// 
// Возвращаемое значение:
//  Строка
Функция МетодРедактироватьПодпись() Экспорт
	Возврат "editMessageCaption"
КонецФункции
	
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьПараметрыВСтроку(URN, Параметры)
	
	СписокПараметров = Новый Массив;
	
	ШаблонПараметра = "%1=%2";
	
	Для Каждого ОписаниеПараметра Из Параметры Цикл
		
		СписокПараметров.Добавить(
			СтрШаблон(ШаблонПараметра, ОписаниеПараметра.Ключ, XMLСтрока(ОписаниеПараметра.Значение)));
		
	КонецЦикла;
	
	Если СписокПараметров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонДополнения = "%1?%2";
	
	URN = СтрШаблон(ШаблонДополнения, URN, СтрСоединить(СписокПараметров, "&"));
	
КонецПроцедуры

#КонецОбласти